{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChange","e","setState","text","target","value","state","placeholder","bind","this","markdown","marked","id","class","className","onChange","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMVC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,KAAMF,EAAEG,OAAOC,SAPf,EAAKC,MAAQ,CACXH,KAAMI,GAER,EAAKP,aAAe,EAAKA,aAAaQ,KAAlB,gBALH,E,qDAYT,IACAL,EAASM,KAAKH,MAAdH,KAEFO,EAAWC,IAAOR,GAExB,OACE,yBAAKS,GAAG,MAAMC,MAAM,aAClB,6BACE,wBAAIC,UAAU,eAAc,kDAC5B,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,eAAc,yDAC5B,8BAAUA,UAAU,eAAeF,GAAG,SAASP,MAAOF,EAAMY,SAAUN,KAAKT,gBAE7E,wBAAIc,UAAU,eAAc,yDAC9B,yBAAKA,UAAU,UAAUE,wBAAyB,CAACC,OAAQP,Y,GA5BnDQ,IAAMC,WAqClBZ,EAAW,8zEAyGFT,ICtIKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d5832061.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: placeholder\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\nhandleChange = (e) => {\n  this.setState({\n    text: e.target.value\n  })\n} \n  render() {\n    const { text } = this.state;\n\n    const markdown = marked(text);\n\n    return (\n      <div id=\"app\" class=\"container\">\n        <div>\n          <h1 className=\"text-center\"><b>Markdown Previewer</b></h1>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h2 className=\"text-center\"><b>Enter your markdown here:</b></h2>\n              <textarea className=\"form-control\" id=\"editor\" value={text} onChange={this.handleChange}/>\n            </div>\n            <h2 className=\"text-center\"><b>And see the output below!</b></h2>\n          <div className=\"preview\" dangerouslySetInnerHTML={{__html: markdown}}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\n\nconst placeholder = \n`\n# Basic Markup:\n\n## Headings: \n\nTo create a heading, simply include 1 hashtag for a h1 element, two hashtags for a h2, and so on.\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n\n### Italics:\n\nThere are two ways of creating italics. You can either wrap the text that you are trying to make italic in asterisks, or you can wrap them in underscores.\n\n*This text* is italic\n_This text_ is also italic\n\n\n### Strong:\n\n**This text** is strong\n__This text__ is also strong\n\n### Escaped Text:\n\n\\*This is an escaped italic\\*\n\\**This is an escaped strong\\**\n\n### Strikethrough: \n~~This text~~ is strikethrough\n\n### Horizontal Rule:\n\n--- Here is a horizontal rule\n___ Here is another horizontal rule\n\n### Blockquotes: \n\nTo create a quote in markdown, simply \n> This is a quote\n\n### Links:\n[Wikipedia](https://en.wikipedia.org/wiki/Markdown)\n\nTo view a title when the cursor hovers over a link, you can include quotes before the closing parenthesis. Try hovering the cursor over the link below:\n\n[Wikipedia](https://en.wikipedia.org/wiki/Markdown \"Markdown\")\n\n### Unordered Lists:\n\nIt is easy to create an unordered list in markdown. You can simply use a single asterisk to represent each item in the list. This markdown previewer covers the following markdown:\n\n* Headings\n* Italics\n* Strong\n* Escaped Text\n* Strikethrough\n* Horizontal Rule\n* Blockquotes\n* Links\n* Unordered Lists\n* Ordered Lists\n* Nested Items\n* Ordered Lists\n* Inline Code Blocks\n* Images\n\n### Nested Items\n\nTo create a nested item, press tab to indent the text:\n\n* Alpha\n* Beta \n* Gamma\n  * Delta\n  * Epsilon\n  * Zeta\n\n### Ordered Lists:\n\nCreating ordered lists is very easy. Just put the letter one followed by a dot.\n1. Eta\n1. Theta\n1. Nu \n1. Tau\n\n### Inline Code Block: \n\nTo create an inline code block in markdown, use a backtick.\n\n### Images:\n\nThis is very similar to links, except that you include an exclamation mark before the brackets.\n\n![Markdown Logo](https://browserengine.net/wp-content/uploads/1441861327mdh-logo-new.png)\n\n### This concludes the instuctions on how to use basic markup. More complex instructions for markup using Github etc can be found online. Try entering some of your own markup into the input field above, and see what comes out!\n\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}